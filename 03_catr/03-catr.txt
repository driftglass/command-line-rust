* Getting Started with catr

[package]
name = "catr"
version = "0.1.0"
edition = "2021"

[dependencies]
clap = "4"
anyhow = "1"

[dev-dependencies]
assert_cmd = "2"
predicates = "2"
rand = "0.8"

* Update src/main.rs

use anyhow::Result;

fn main() {
    if let Err(e) = run() {
        eprintln!("{e}");
        std::process::exit(1);
    }
}

fn run() -> Result<()> {
    println!("Hello, world!");
    Ok(())
}

* Update src/main.rs

use anyhow::Result;
use clap::{Arg, ArgAction, Command};

#[derive(Debug)]
struct Config {
    files: Vec<String>,
    number_lines: bool,
    number_nonblank_lines: bool,
}

fn main() {
    if let Err(e) = run(get_args()) {
        eprintln!("{e}");
        std::process::exit(1);
    }
}

fn run(config: Config) -> Result<()> {
    dbg!(config);
    Ok(())
}

fn get_args() -> Config {
    let matches = Command::new("catr")
        .version("0.1.0")
        .author("Ken Youens-Clark <kyclark@gmail.com>")
        .about("Rust cat")
        // What goes here?
        .get_matches();

    Config {
        files: ...,
        number_lines: ...,
        number_nonblank_lines: ...,
    }
}

* Update src/main.rs

use anyhow::Result;
use clap::{Arg, ArgAction, Command};

#[derive(Debug)]
struct Config {
    files: Vec<String>,
    number_lines: bool,
    number_nonblank_lines: bool,
}

fn main() {
    if let Err(e) = run(get_args()) {
        eprintln!("{e}");
        std::process::exit(1);
    }
}

fn run(config: Config) -> Result<()> {
    dbg!(config);
    Ok(())
}

fn get_args() -> Config {
    let matches = Command::new("catr")
        .version("0.1.0")
        .author("Ken Youens-Clark <kyclark@gmail.com>")
        .about("Rust cat")
        .arg(
            Arg::new("files")
                .value_name("FILE")
                .help("Input file(s)")
                .num_args(1..)
                .default_value("-"),
        )
        .arg(
            Arg::new("number")
                .short('n')
                .long("number")
                .help("Number lines")
                .action(ArgAction::SetTrue)
                .conflicts_with("number_nonblank"),
        )
        .arg(
            Arg::new("number_nonblank")
                .short('b')
                .long("number-nonblank")
                .help("Number non-blank lines")
                .action(ArgAction::SetTrue),
        )
        .get_matches();

    Config {
        files: matches
            .get_many("files")
            .expect("files required")
            .cloned()
            .collect(),
        number_lines: matches.get_flag("number"),
        number_nonblank_lines: matches.get_flag("number_nonblank"),
    }
}

* Update src/main.rs

fn run(config: Config) -> Result<()> {
    for filename in config.files {
        println!("{filename}");
    }
    Ok(())
}

* Update src/main.rs

use anyhow::Result;
use clap::{Arg, ArgAction, Command};
use std::fs::File;
use std::io::{self, BufRead, BufReader};

#[derive(Debug)]
struct Config {
    files: Vec<String>,
    number_lines: bool,
    number_nonblank_lines: bool,
}

fn main() {
    if let Err(e) = run(get_args()) {
        eprintln!("{e}");
        std::process::exit(1);
    }
}

fn run(config: Config) -> Result<()> {
    for filename in config.files {
        match open(&filename) {
            Err(err) => eprintln!("Failed to open {filename}: {err}"),
            Ok(_) => println!("Opened {filename}"),
        }
    }
    Ok(())
}

fn get_args() -> Config {
    let matches = Command::new("catr")
        .version("0.1.0")
        .author("Ken Youens-Clark <kyclark@gmail.com>")
        .about("Rust cat")
        .arg(
            Arg::new("files")
                .value_name("FILE")
                .help("Input file(s)")
                .num_args(1..)
                .default_value("-"),
        )
        .arg(
            Arg::new("number")
                .short('n')
                .long("number")
                .help("Number lines")
                .action(ArgAction::SetTrue)
                .conflicts_with("number_nonblank"),
        )
        .arg(
            Arg::new("number_nonblank")
                .short('b')
                .long("number-nonblank")
                .help("Number non-blank lines")
                .action(ArgAction::SetTrue),
        )
        .get_matches();

    Config {
        files: matches
            .get_many("files")
            .expect("files required")
            .cloned()
            .collect(),
        number_lines: matches.get_flag("number"),
        number_nonblank_lines: matches.get_flag("number_nonblank"),
    }
}

fn open(filename: &str) -> Result<Box<dyn BufRead>> {
    match filename {
        "-" => Ok(Box::new(BufReader::new(io::stdin()))),
        _ => Ok(Box::new(BufReader::new(File::open(filename)?))),
    }
}

* Make Unreadable File

touch cant-touch-this && chmod 000 cant-touch-this

* Update src/main.rs

fn run(config: Config) -> Result<()> {
    for filename in config.files {
        match open(&filename) {
            Err(err) => eprintln!("Failed to open {filename}: {err}"),
            Ok(file) => {
                for line_result in file.lines() {
                    let line = line_result?;
                    println!("{line}");
                }
            }
        }
    }
    Ok(())
}

* Update src/main.rs

fn run(config: Config) -> Result<()> {
    for filename in config.files {
        match open(&filename) {
            Err(err) => eprintln!("Failed to open {filename}: {err}"),
            Ok(file) => {
                let mut line_num = 0;
                for line_result in file.lines() {
                    let line = line_result?;
                    line_num += 1;
                    if config.number_lines {
                        println!("{line_num:>6}\t{line}");
                    } else {
                        println!("{line}");
                    }
                }
            }
        }
    }
    Ok(())
}

* Update src/main.rs

fn run(config: Config) -> Result<()> {
    for filename in config.files {
        match open(&filename) {
            Err(err) => eprintln!("Failed to open {filename}: {err}"),
            Ok(file) => {
                for (line_num, line_result) in file.lines().enumerate() {
                    let line = line_result?;
                    if config.number_lines {
                        println!("{:>6}\t{line}", line_num + 1);
                    } else {
                        println!("{}", line);
                    }
                }
            }
        }
    }
    Ok(())
}

* Update src/main.rs

fn run(config: Config) -> Result<()> {
    for filename in config.files {
        match open(&filename) {
            Err(err) => eprintln!("Failed to open {filename}: {err}"),
            Ok(file) => {
                let mut last_num = 0;
                for (line_num, line_result) in file.lines().enumerate() {
                    let line = line_result?;
                    if config.number_lines {
                        println!("{:6}\t{line}", line_num + 1);
                    } else if config.number_nonblank_lines {
                        if !line.is_empty() {
                            last_num += 1;
                            println!("{last_num:6}\t{line}");
                        } else {
                            println!();
                        }
                    } else {
                        println!("{line}");
                    }
                }
            }
        }
    }
    Ok(())
}
